name: ci
on: [push]
jobs:
  ci:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        node-version: [12.x]
        name: [macos, ubuntu, windows]
        include:
          - name: macos
            os: macos-10.15
            compiler: gcc
            version: "9"
            vcpkg_triplet: x64-osx-grinpp
            cmake_generator: Ninja
            cmake_platform_args: ''
          - name: ubuntu
            os: ubuntu-16.04
            vcpkg_triplet: x64-linux
            cmake_generator: Ninja
            cmake_platform_args: ''
          - name: windows
            os: windows-2019
            vcpkg_triplet: x64-windows-static
            cmake_generator: 'VS16Win64'
            cmake_platform_args: ''

    steps:
      - name: Checkout Grin++ Backend
        uses: actions/checkout@v2
        with:
          path: backend
      - name: Checkout Grin++ UI
        uses: actions/checkout@v2
        with:
          repository: GrinPlusPlus/GrinPlusPlusUI
          path: frontend
      - name: Checkout vcpkg
        uses: actions/checkout@v2
        with:
          repository: microsoft/vcpkg
          path: vcpkg
      - name: setup macos environment
        if: runner.os == 'macOS'
        run: |
          brew install gcc cmake
          echo "::set-env name=CC::gcc-${{ matrix.version }}"
          echo "::set-env name=CXX::g++-${{ matrix.version }}"
          brew install gflags
      - name: setup ubuntu environment
        if: runner.os == 'Linux'
        run: |
          sudo apt install uuid-dev
          sudo apt install libgflags2.2 libgflags-dev
      - name: Cache vcpkg artifacts
        uses: actions/cache@v2
        with:
          path: ${{ github.workspace }}/vcpkg/
          key: ${{ hashFiles( '.git/HEAD' ) }}--${{ hashFiles( '../backend/vcpkg/*' ) }}${{ runner.os }}
      - name: Run vcpkg
        uses: lukka/run-vcpkg@v3
        with:
          vcpkgArguments: '--overlay-ports=${{ github.workspace }}/backend/vcpkg/custom_ports --overlay-triplets=${{ github.workspace }}/backend/vcpkg/custom_triplets --triplet ${{ matrix.vcpkg_triplet }} @${{ github.workspace }}/backend/vcpkg/packages.txt'
          vcpkgDirectory: '${{ github.workspace }}/vcpkg'
          vcpkgGitCommitId: 'd367c4c0b8ab65278f6e9e1b21641753a6273882'
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: 'Run CMake'
        uses: lukka/run-cmake@v2
        with:
          cmakeGenerator: ${{ matrix.cmake_generator }}
          cmakeBuildType: 'Release'
          cmakeListsOrSettingsJson: CMakeListsTxtAdvanced
          cmakeListsTxtPath: '${{ github.workspace }}/backend/CMakeLists.txt'
          useVcpkgToolchainFile: true
          vcpkgTriplet: '${{ matrix.vcpkg_triplet }}'
          buildDirectory: '${{ github.workspace }}/build'
          cmakeAppendedArgs: ' ${{ matrix.cmake_platform_args }} -DCMAKE_BUILD_TYPE=Release -DGRINPP_TESTS=OFF"'
          buildWithCMake: false
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        env:
          GITHUB_RUN_ID: ${{ github.run_id }}    
        with:
          name: GrinNode_${{ runner.os }}_${{ env.GITHUB_RUN_ID }}
          path: bin/Release/GrinNode*
      - name: Build UI (windows)
        working-directory: frontend
        if: runner.os == 'windows' && startsWith(github.ref, 'refs/tags/')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          copy "..\bin\Release\GrinNode.exe" "./bin/"
          npm run clean_build:win && npm run release
      - name: Build UI (mac/linux)
        working-directory: frontend
        if: runner.os != 'windows' && startsWith(github.ref, 'refs/tags/')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cp ../bin/Release/GrinNode ./bin/
          npm run clean_build:nix && npm run release